# -*- coding: utf-8 -*-
"""Data Collection & Cleaning -- DATA 301 Project -- Abbey Towse & Jack Rhines.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1soYKewkq1yYwzPwMD0uUyAPDFvgwjpHJ

# **Project Proposal**

**DATA 301 Final Project**

Abbey Towse & Jack Rhines

---
**Proposal**

We would like to use machine learning to predict the winner of the Super Bowl. We will primarily base it on team performance -- overall record, draft order, years of experience by the Head Coach, appearance in the playoffs, and winning the superbowl.  We could also could look at the few seasons prior if we feel that that we need more data points, but we would apply the most weight to the current season.

(Keep in mind that we are training our model over the history of the NFL since expanding to 32 teams (2002-present) -- not just the last few years. But our overall goal is to create a model that can predict the winner of the 2022 Super Bowl).

**Motivation**

We love the Philadelphia Eagles and are interested in investigating if they have what it takes to win the Superbowl this season.

**Research Questions**

 - Which statistcal metrics about a team have an impact on winning the Superbowl?  
 - How often do top seeds win the Superbowl vs lower seeds?
 - Do margins of victory or point differentials really matter?
 - What side of the ball (offense, defense, special teams) is more important?  Do they need to be balanced?
 - Is overall team record a good predictor of playoff success?  Do teams with a "weaker" strength of schedule perform worse in the playoffs?
 -  Does the head coach affect a team's success?
 -  Historically, how did the team that won the super bowl do the previous year?  What did they do to win the super bowl when they could not the previous year?
 - *Stretch Goal:  If we have time, we'd like to investigate how our results compare to Vegas' preseason predictions.*

**Overall Research Question**

Based on football statistical metrics collected every season, is it possible to create a model that can accurately predict the winner of the 2022 season Superbowl?

 **Observational Units**

 Our observational unit is the performance of a singular team across an entire season.  These obsevational units are collected into a dataframe of all teams in the league, and there is an observation for each team that played each season since 2002.

 **Variables**


| Variable | Full Name | Description |
| --- | --- | --- |
| W | Wins | The number of wins the team achieved in this season |
| L | Losses | The number of losses that the team had this season |
| T | Ties | The number of ties that the team had this season |
| W-L% | Win-Loss % | The proportion of games won vs lost |
| PF | Points For | The total number of points the team scored this season |
| PA | Points Against | The total number of points scored against this team |
| PD | Point Differential | The difference between points scored and points scored against |
| MoV | Margin of Victory | The average number of points that the team won/lost by. |
| SoS | Strength of Schedule | The overall relative strength of the opponents they played this season, based on W-L% (1 is harder, 0 is easier)
| SRS | Simple Rating System | A metric from ProFootballReference that measures the overall quality of the team.
| OSRS | Offensive SRS | A metric from PFR that measures the offensive quality of the team. |
| DSRS | Defensive SRS | A metric from PFR that measures the defensive quality of the team. |
| Year | Year | The year for which this team's stats are being recorded. |
| draft_order | Draft Order | The spot at which this team picked before the season started (before trades), which represents where they finished the previous year. |
| head_coach_exp_yrs| Head Coach Experience | The experience of the head coach, measured in total years spent as an NFL head coach. |
| superbowl | Won superbowl? | A categorical variable (converted to dummies) representing whether the team did or did not win the super bowl that year.  (Not used in our model, just for testing) |
| seed | Seed | The seed that the team had that season (0 if they did not make the playoffs) |
| made_playoffs | Made Playoffs? | A dummy categorical variable representing whether or not the team made the playoffs (Also not used in the model)

---

#**Data Collection & Cleaning**

Data sources to build the data frame:

pro-football-reference.com:

*   https://www.pro-football-reference.com/years/2002/
*   https://www.pro-football-reference.com/years/2002/coaches.htm
*   https://www.pro-football-reference.com/coaches/
*   https://www.pro-football-reference.com/super-bowl/
*   https://www.pro-football-reference.com/years/2002/playoffs.htm

prosportstransactions.com:
*   https://www.prosportstransactions.com/football/DraftTrades/Years/2002.htm
"""

# import packages

import pandas as pd
import requests
from bs4 import BeautifulSoup
import time

"""## General Statistics
Get a lot of general statistics for our data frame:
"""

# webscraping

response = requests.get("https://www.pro-football-reference.com/years/2002/")
soup = BeautifulSoup(response.content, "html.parser")

# format scrapped data to grab column headers

tables = soup.find_all("table")

table_headers = []

header = tables[0].find_all("tr")[0]

for cell in header.find_all("th"):
  table_headers.append(cell.text)

table_headers

# format scrapped data to put in a data frame

entries = []

for table in tables:

  data = table.find_all("tr")[2:]

  for d in data:
    entry = []

    cells = d.find_all()
    for cell in cells[1:]:
      entry.append(cell.text)

    if len(entry) < len(table_headers):
      entry.insert(3, "0")

    entries.append(entry)

# put scraped data into a data frame

df_all = pd.DataFrame(entries)
df_all = df_all.rename(columns={0: table_headers[0], 1: table_headers[1], 2: table_headers[2], 3: table_headers[3], 4: table_headers[4], 5: table_headers[5], 6: table_headers[6], 7: table_headers[7], 8: table_headers[8], 9: table_headers[9], 10: table_headers[10], 11: table_headers[11], 12: table_headers[12]})
df_all = df_all.drop([4, 9, 14, 23, 28, 33]).reset_index().drop(columns="index")
df_all["year"] = 2002

# make function to automate formatting scrapped data to be put in a data frame

def make_data_frame(year, tables):

  entries = []

  for table in tables:

    data = table.find_all("tr")[2:]

    for d in data:
      entry = []

      cells = d.find_all()
      for cell in cells[1:]:
        entry.append(cell.text)

      if len(entry) < len(table_headers):
        entry.insert(3, "0")

      entries.append(entry)

  data = tables[0].find_all("tr")[2:]

  df_teams = pd.DataFrame(entries)
  df_teams = df_teams.rename(columns={0: table_headers[0], 1: table_headers[1], 2: table_headers[2], 3: table_headers[3], 4: table_headers[4], 5: table_headers[5], 6: table_headers[6], 7: table_headers[7], 8: table_headers[8], 9: table_headers[9], 10: table_headers[10], 11: table_headers[11], 12: table_headers[12]})
  df_teams = df_teams.drop([4, 9, 14, 23, 28, 33]).reset_index().drop(columns="index")
  df_teams["year"] = year

  return df_teams

# scrape data and put into data frame from the years 2003 to 2021

for year in range(2003, 2023):
  response = requests.get("https://www.pro-football-reference.com/years/" + str(year))
  soup = BeautifulSoup(response.content, "html.parser")
  #print(year)

  tables = soup.find_all("table")
  df_temp = make_data_frame(year, tables)

  df_all = pd.concat([df_all, df_temp], ignore_index=True)

  time.sleep(5)

df_all

# Make team names that have changed since 2002 consistent with most recent names

df_all = df_all.replace("Oakland Raiders", "Las Vegas Raiders").replace(
    "San Diego Chargers", "Los Angeles Chargers").replace(
        "Washington Redskins", "Washington Commanders").replace(
            "St. Louis Rams", "Los Angeles Rams").replace(
                "Washington Football Team", "Washington Commanders")

"""## Draft Order
Get the draft order for our data frame:
"""

# webscraping

response = requests.get("https://www.prosportstransactions.com/football/DraftTrades/Years/2002.htm")
soup = BeautifulSoup(response.content, "html.parser")

# format scrapped data to put in a data frame

tables = soup.find_all("table")

rows = []
for team in tables[0].find_all("tr")[1:]:
    row = team.find_all("td")
    cell_count = 0
    for r in row:
      cells = r.find_all()
      for cell in cells[1:]:
        cell_count = cell_count + 1
        if (cell_count == 2):
          rows.append(cell.text)

ordering = rows[0:32]

# get a series of the values 1 through 32 (number of teams in the NFL)

numbers = [32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
num = pd.Series(data=numbers)

# put scraped data into a data frame

df_orderings = pd.DataFrame(ordering)
df_orderings = df_orderings.rename(columns={0: "team_name"})
df_orderings["draft_order"] = num
df_orderings["year"] = 2002

# make function to automate formatting scrapped data to be put in a data frame

def make_data_frame1(year, tables):

  rows = []

  for team in tables[0].find_all("tr")[1:]:
    row = team.find_all("td")
    cell_count = 0
    for r in row:
      cells = r.find_all()

      for cell in cells[1:]:
        cell_count = cell_count + 1
        if (cell_count == 2):
          rows.append(cell.text)

  ordering = rows[0:32]

  num = pd.Series(data=numbers)

  df_orderings = pd.DataFrame(ordering)
  df_orderings = df_orderings.rename(columns={0: "team_name"})
  df_orderings["draft_order"] = num
  df_orderings["year"] = year

  return df_orderings

# scrape data and put into data frame from the years 2003 to 2021

for year in range(2003, 2023):
  response = requests.get("https://www.prosportstransactions.com/football/DraftTrades/Years/" + str(year) + ".htm")
  soup = BeautifulSoup(response.content, "html.parser")

  tables = soup.find_all("table")
  df_temp = make_data_frame1(year, tables)

  df_orderings = pd.concat([df_orderings, df_temp], ignore_index=True)

  time.sleep(5)

df_orderings

# Clean scraped team names and make team names consistent

df_orderings = df_orderings.replace(
    " Jets", "New York Jets").replace("\nJets\n", "New York Jets").replace(
        " Patriots", "New England Patriots").replace("\nPatriots\n", "New England Patriots").replace("Patriots", "New England Patriots").replace(
            " Dolphins", "Miami Dolphins").replace("\nDolphins\n", "Miami Dolphins").replace(
                " Bills", "Buffalo Bills").replace("\nBills\n", "Buffalo Bills").replace("Bills", "Buffalo Bills").replace(
                    " Steelers", "Pittsburgh Steelers").replace("\nSteelers\n", "Pittsburgh Steelers").replace("          Steelers", "Pittsburgh Steelers").replace(
                        " Browns", "Cleveland Browns").replace("\nBrowns\n", "Cleveland Browns").replace("Browns", "Cleveland Browns").replace(
                            " Ravens", "Baltimore Ravens").replace("\nRavens\n", "Baltimore Ravens").replace(
                                " Bengals", "Cincinnati Bengals").replace("\nBengals\n", "Cincinnati Bengals").replace("Bengals", "Cincinnati Bengals").replace(
                                  " Titans", "Tennessee Titans").replace("\nTitans\n", "Tennessee Titans").replace(
                                      " Colts", "Indianapolis Colts").replace("\nColts\n", "Indianapolis Colts").replace("Colts", "Indianapolis Colts").replace(
                                          " Jaguars", "Jacksonville Jaguars").replace("\nJaguars\n", "Jacksonville Jaguars").replace(
                                              " Texans", "Houston Texans").replace("\nTexans\n", "Houston Texans").replace(
                                                  " Raiders", "Las Vegas Raiders").replace("\nRaiders\n", "Las Vegas Raiders").replace(
                                                      " Broncos", "Denver Broncos").replace("\nBroncos\n", "Denver Broncos").replace("Broncos", "Denver Broncos").replace(
                                                          " Chargers", "Los Angeles Chargers").replace("\nChargers\n", "Los Angeles Chargers").replace(
                                                              " Chiefs", "Kansas City Chiefs").replace("\nChiefs\n", "Kansas City Chiefs").replace(
                                                                  " Eagles", "Philadelphia Eagles").replace("\nEagles\n", "Philadelphia Eagles").replace(
                                                                      " Giants", "New York Giants").replace("\nGiants\n", "New York Giants").replace("          Giants", "New York Giants").replace(
                                                                          " Redskins", "Washington Commanders").replace("\nRedskins\n", "Washington Commanders").replace("\nWashington\n", "Washington Commanders").replace("\nCommanders\n", "Washington Commanders").replace(
                                                                              " Cowboys", "Dallas Cowboys").replace("\nCowboys\n", "Dallas Cowboys").replace(
                                                                                  " Packers", "Green Bay Packers").replace("\nPackers\n", "Green Bay Packers").replace(
                                                                                      " Vikings", "Minnesota Vikings").replace("\nVikings\n", "Minnesota Vikings").replace(
                                                                                          " Bears", "Chicago Bears").replace("\nBears\n", "Chicago Bears").replace(
                                                                                              " Lions", "Detroit Lions").replace("\nLions\n", "Detroit Lions").replace(
                                                                                                  " Buccaneers", "Tampa Bay Buccaneers").replace("\nBuccaneers\n", "Tampa Bay Buccaneers").replace(
                                                                                                      " Falcons", "Atlanta Falcons").replace("\nFalcons\n", "Atlanta Falcons").replace(
                                                                                                          " Saints", "New Orleans Saints").replace("\nSaints\n", "New Orleans Saints").replace(
                                                                                                              " Panthers", "Carolina Panthers").replace("\nPanthers\n", "Carolina Panthers").replace("Panthers", "Carolina Panthers").replace(
                                                                                                                  " 49ers", "San Francisco 49ers").replace("\n49ers\n", "San Francisco 49ers").replace(
                                                                                                                      " Rams", "Los Angeles Rams").replace("\nRams\n", "Los Angeles Rams").replace("          Rams", "Los Angeles Rams").replace(
                                                                                                                          " Seahawks", "Seattle Seahawks").replace("\nSeahawks\n", "Seattle Seahawks").replace(
                                                                                                                              " Cardinals", "Arizona Cardinals").replace("\nCardinals\n", "Arizona Cardinals").replace("Cardinals", "Arizona Cardinals")

df_orderings = df_orderings.rename(columns = {"team_name" : "Tm"})

# merge together draft order data frame (df_orderings) and the data frame with general statistics (df_all)

df_all = df_all.merge(df_orderings, on=["Tm", "year"])
df_all

"""## Years of experience by head coach
Get the years of experience by head coach for our data frame. We will do this in two parts:

1) Build a data frame of the coaches associated with each team each season

2) Build a data frame of the years each coach was coaching to calculate their experience

We will then combined these two data frames.
"""

# webscraping (1)

response = requests.get("https://www.pro-football-reference.com/years/2002/coaches.htm")
soup = BeautifulSoup(response.content, "html.parser")

# format scrapped data to put in a data frame (1)

tables = soup.find_all("table")

entries = []

for table in tables:

  data = table.find_all("tr")[2:]

  for d in data:
    entry = []
    cells = d.find_all()

    for cell in cells[1:3]:
      entry.append(cell.text)

    entries.append(entry)

# put scraped data into a data frame (1)

df_coaches = pd.DataFrame(entries)
df_coaches = df_coaches.rename(columns={0: "coach_name", 1 : "team"})
df_coaches["year"] = 2002
df_coaches

# make function to automate formatting scrapped data to be put in a data frame (1)

def make_data_frame2(year, tables):

  entries = []

  for table in tables:
    data = table.find_all("tr")[2:]

    for d in data:
      entry = []
      cells = d.find_all()

      for cell in cells[1:3]:
        entry.append(cell.text)

      entries.append(entry)

  df_coaches = pd.DataFrame(entries)
  df_coaches = df_coaches.rename(columns={0: "coach_name", 1 : "team"})
  df_coaches["year"] = year

  return df_coaches

# scrape data and put into data frame from the years 2003 to 2021 (1)

for year in range(2003, 2023):
  response = requests.get("https://www.pro-football-reference.com/years/" + str(year) + "/coaches.htm")
  soup = BeautifulSoup(response.content, "html.parser")
  tables = soup.find_all("table")
  df_temp = make_data_frame2(year, tables)

  df_coaches = pd.concat([df_coaches, df_temp], ignore_index=True)

  time.sleep(5)

df_coaches

# Clean scraped team names and make team names consistent (1)

df_coaches = df_coaches.replace(
    "NYJ", "New York Jets").replace(
        "NWE", "New England Patriots").replace(
            "MIA", "Miami Dolphins").replace(
                "BUF", "Buffalo Bills").replace(
                    "PIT", "Pittsburgh Steelers").replace(
                        "CLE", "Cleveland Browns").replace(
                            "BAL", "Baltimore Ravens").replace(
                                "CIN", "Cincinnati Bengals").replace(
                                  "TEN", "Tennessee Titans").replace(
                                      "IND", "Indianapolis Colts").replace(
                                          "JAX", "Jacksonville Jaguars").replace(
                                              "HOU", "Houston Texans").replace(
                                                  "OAK", "Las Vegas Raiders").replace("LVR", "Las Vegas Raiders").replace(
                                                      "DEN", "Denver Broncos").replace(
                                                          "SDG", "Los Angeles Chargers").replace("LAC", "Los Angeles Chargers").replace(
                                                              "KAN", "Kansas City Chiefs").replace(
                                                                  "PHI", "Philadelphia Eagles").replace(
                                                                      "NYG", "New York Giants").replace(
                                                                          "WAS", "Washington Commanders").replace(
                                                                              "DAL", "Dallas Cowboys").replace(
                                                                                  "GNB", "Green Bay Packers").replace(
                                                                                      "MIN", "Minnesota Vikings").replace(
                                                                                          "CHI", "Chicago Bears").replace(
                                                                                              "DET", "Detroit Lions").replace(
                                                                                                  "TAM", "Tampa Bay Buccaneers").replace(
                                                                                                      "ATL", "Atlanta Falcons").replace(
                                                                                                          "NOR", "New Orleans Saints").replace(
                                                                                                              "CAR", "Carolina Panthers").replace(
                                                                                                                  "SFO", "San Francisco 49ers").replace(
                                                                                                                      "STL", "Los Angeles Rams").replace("LAR", "Los Angeles Rams").replace(
                                                                                                                          "SEA", "Seattle Seahawks").replace(
                                                                                                                              "ARI", "Arizona Cardinals")

df_coaches = df_coaches.rename(columns = {"team" : "Tm"})

# webscraping (2)

response = requests.get("https://www.pro-football-reference.com/coaches/")
soup = BeautifulSoup(response.content, "html.parser")

# format scrapped data to put in a data frame (2)

tables = soup.find_all("table")

entries = []

for table in tables:

  data = table.find_all("tr")[1:]

  for d in data:
    entry = []
    cells = d.find_all()

    for cell in cells:
      entry.append(cell.text)

    entries.append(entry)

# put scraped data into a data frame (2)

df_years = pd.DataFrame(entries)
df_years = df_years[[2, 4, 5]]
df_years = df_years.rename(columns = {2: "coach_name", 4: "start_year", 5: "end_year"})

# merge together data frame of NFL coaches for each team each year (df_coachess)
# and the data frame of the years each NFL coach started and ended coaching (df_years) (2)

df_coaches = df_coaches.merge(df_years, on=["coach_name"], how ="inner")
df_coaches

# convert start_year and end_year variables to integers (2)

df_coaches["start_year"] = df_coaches["start_year"].astype(int)
df_coaches["end_year"] = df_coaches["end_year"].astype(int)

# clean data that was not formatted correctly when scrapped
# (ie fix start and end years) (2)

df_coaches.loc[df_coaches['coach_name'] == "Andy Reid", 'start_year'] = 1999
df_coaches.loc[df_coaches['coach_name'] == "Andy Reid", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Bill Belichick", 'start_year'] = 1991
df_coaches.loc[df_coaches['coach_name'] == "Bill Belichick", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Lovie Smith", 'start_year'] = 2004
df_coaches.loc[df_coaches['coach_name'] == "Lovie Smith", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Mike McCarthy", 'start_year'] = 2006
df_coaches.loc[df_coaches['coach_name'] == "Mike McCarthy", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Mike Tomlin", 'start_year'] = 2007
df_coaches.loc[df_coaches['coach_name'] == "Mike Tomlin", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "John Harbaugh", 'start_year'] = 2008
df_coaches.loc[df_coaches['coach_name'] == "John Harbaugh", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Josh McDaniels", 'start_year'] = 2009
df_coaches.loc[df_coaches['coach_name'] == "Josh McDaniels", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Pete Carroll", 'start_year'] = 1994
df_coaches.loc[df_coaches['coach_name'] == "Pete Carroll", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Todd Bowles", 'start_year'] = 2011
df_coaches.loc[df_coaches['coach_name'] == "Todd Bowles", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Ron Rivera", 'start_year'] = 2011
df_coaches.loc[df_coaches['coach_name'] == "Ron Rivera", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Dennis Allen", 'start_year'] = 2012
df_coaches.loc[df_coaches['coach_name'] == "Dennis Allen", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Dan Campbell", 'start_year'] = 2015
df_coaches.loc[df_coaches['coach_name'] == "Dan Campbell", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Doug Pederson", 'start_year'] = 2016
df_coaches.loc[df_coaches['coach_name'] == "Doug Pederson", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Kyle Shanahan", 'start_year'] = 2017
df_coaches.loc[df_coaches['coach_name'] == "Kyle Shanahan", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Sean McDermott", 'start_year'] = 2017
df_coaches.loc[df_coaches['coach_name'] == "Sean McDermott", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Sean McVay", 'start_year'] = 2017
df_coaches.loc[df_coaches['coach_name'] == "Sean McVay", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Steve Wilks", 'start_year'] = 2018
df_coaches.loc[df_coaches['coach_name'] == "Steve Wilk", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Mike Vrabel", 'start_year'] = 2018
df_coaches.loc[df_coaches['coach_name'] == "Mike Vrabel", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Matt LaFleur", 'start_year'] = 2019
df_coaches.loc[df_coaches['coach_name'] == "Matt LaFleur", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Zac Taylor", 'start_year'] = 2019
df_coaches.loc[df_coaches['coach_name'] == "Zac Taylor", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Kliff Kingsbury", 'start_year'] = 2019
df_coaches.loc[df_coaches['coach_name'] == "Kliff Kingsbury", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Matt Rhule", 'start_year'] = 2020
df_coaches.loc[df_coaches['coach_name'] == "Matt Rhule", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Kevin Stefanski", 'start_year'] = 2020
df_coaches.loc[df_coaches['coach_name'] == "Kevin Stefanski", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Nick Sirianni", 'start_year'] = 2021
df_coaches.loc[df_coaches['coach_name'] == "Nick Sirianni", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Brandon Staley", 'start_year'] = 2021
df_coaches.loc[df_coaches['coach_name'] == "Brandon Staley", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Arthur Smith", 'start_year'] = 2021
df_coaches.loc[df_coaches['coach_name'] == "Arthur Smith", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Robert Saleh", 'start_year'] = 2021
df_coaches.loc[df_coaches['coach_name'] == "Robert Saleh", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Jim Mora", 'start_year'] = 1986
df_coaches.loc[df_coaches['coach_name'] == "Jim Mora", 'end_year'] = 2009
df_coaches.loc[df_coaches['coach_name'] == "Matt Eberflus", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Matt Eberflus", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Nathaniel Hackett", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Nathaniel Hackett", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Jeff Saturday", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Jeff Saturday", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Mike McDaniel", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Mike McDaniel", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Kevin O'Connell", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Kevin O'Connell", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Brian Daboll", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Brian Daboll", 'end_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Jerry Rosburg", 'start_year'] = 2022
df_coaches.loc[df_coaches['coach_name'] == "Jerry Rosburg", 'end_year'] = 2022

# calculate each coach's years of experience each season (2)

df_coaches["experience"] = df_coaches["year"] - df_coaches["start_year"].astype(int)

# to make sure each team had one coach per season, we are only going to keep coaches
# that finished the season with each team. Here we are removing coaches that got
# fired, resigned, etc. during each season (2)

df_coaches = df_coaches.drop([3, 246, 39, 87, 248, 175, 171, 250, 368, 371, 358, 298, 35, 253, 207, 426, 334, 420, 237, 442, 413, 538, 327, 541, 536, 569, 366, 450, 566, 200, 619, 519, 316, 500, 597, 603, 657, 583, 700, 186, 662, 689, 709])

# format the data frame to prepare for merging (2)

df_coaches = df_coaches[["Tm", "year", "experience"]]
df_coaches = df_coaches.rename(columns = {"experience":"head_coach_exp_yrs"})

df_coaches[df_coaches["year"] == 2022]

df_all

# merge together data frame of NFL coaches for each team each year (df_coachess)
# and the data frame holding all the information gathered (df_all) (1 + 2)

df_all = df_all.merge(df_coaches, on=["Tm", "year"])
df_all

"""## Superbowl Winner
Get whether or not a team won the superbowl into our data frame:
"""

# webscraping

response = requests.get("https://www.pro-football-reference.com/super-bowl/")
soup = BeautifulSoup(response.content, "html.parser")

# format scrapped data to put in a data frame

tables = soup.find_all("table")

entries = []

for table in tables:

  data = table.find_all("tr")[1:]

  for d in data:
    entry = []
    cells = d.find_all()

    for cell in cells:
      entry.append(cell.text)

    entries.append(entry)

# put scraped data into a data frame

df_superbowl = pd.DataFrame(entries)
df_superbowl = df_superbowl[[0, 4]]
df_superbowl = df_superbowl.rename(columns = {0: "date", 4: "winner"})

# get the year of the season of each Super Bowl

df_superbowl["year"] = df_superbowl["date"].str.split(",").str[1].astype(int) - 1

# format the data frame so we only have the data we want (2002-2021) and to have
# consistant naming schemas

df_superbowl = df_superbowl.drop(columns = ["date"])
df_superbowl = df_superbowl.rename(columns = {"winner" : "Tm"})
df_superbowl = df_superbowl[df_superbowl["year"] > 2001]



df_all_copy = df_all

# create a superbowl variable in df_all where 1 indicates a team won the superbowl
# and 0 indicate a team did not win the superbowl

df_all["superbowl"] = 0

for year in range(2002, 2022):
  winner = df_superbowl[df_superbowl["year"] == year]["Tm"].to_string().split("    ")[1]
  df_all.loc[(df_all['Tm'] == winner) & (df_all["year"] == year), 'superbowl'] = 1

"""## Playoffs Statistics
Get whether a team went to the playoffs each year and the team's corresponding seed (seeds 1-6 and 0 meanings they did not go to the playoffs):
"""

# webscraping

response = requests.get("https://www.pro-football-reference.com/years/2002/playoffs.htm")
soup = BeautifulSoup(response.content, "html.parser")

# format scrapped data to put in a data frame

tables = soup.find_all("table")

entries = []

for table in tables:

  data = table.find_all("tr")[1:]

  for d in data:
    entry = []

    cells = d.find_all()
    for cell in cells:
      entry.append(cell.text)

    entries.append(entry)

# put scraped data into a data frame

df_playoffs = pd.DataFrame(entries)
df_playoffs = df_playoffs[[0, 1]]
df_playoffs = df_playoffs.rename(columns={0: "seed", 1: "Tm"})
df_playoffs["seed"] = df_playoffs["seed"].replace("", "0")
df_playoffs["seed"] = df_playoffs["seed"].astype(int)
df_playoffs["year"] = 2002

# make function to automate formatting scrapped data to be put in a data frame

def make_data_frame3(year, tables):

  tables = soup.find_all("table")
  entries = []

  for table in tables:

    data = table.find_all("tr")[1:]

    for d in data:
      entry = []

      cells = d.find_all()
      for cell in cells:
        entry.append(cell.text)

      entries.append(entry)

  df_playoffs = pd.DataFrame(entries)
  df_playoffs = df_playoffs[[0, 1]]
  df_playoffs = df_playoffs.rename(columns={0: "seed", 1: "Tm"})
  df_playoffs["seed"] = df_playoffs["seed"].replace("", "0")
  df_playoffs["seed"] = df_playoffs["seed"].astype(int)
  df_playoffs["year"] = year

  return df_playoffs

# scrape data and put into data frame from the years 2003 to 2021

for year in range(2003, 2023):
  response = requests.get("https://www.pro-football-reference.com/years/" + str(year) + "/playoffs.htm")
  soup = BeautifulSoup(response.content, "html.parser")
  tables = soup.find_all("table")
  df_temp = make_data_frame3(year, tables)

  df_playoffs = pd.concat([df_playoffs, df_temp], ignore_index=True)

  time.sleep(5)

# add a made_playoffs dummy variable

df_playoffs["made_playoffs"] = 0
df_playoffs.loc[df_playoffs["seed"] > 0, 'made_playoffs'] = 1
df_playoffs

# Make team names that have changed since 2002 consistent with most recent names

df_playoffs = df_playoffs.replace("Oakland Raiders", "Las Vegas Raiders").replace(
    "San Diego Chargers", "Los Angeles Chargers").replace(
        "Washington Redskins", "Washington Commanders").replace(
            "St. Louis Rams", "Los Angeles Rams").replace(
                "Washington Football Team", "Washington Commanders")

# merge the date frame with information about the playoffs (df_playoffs) with the
# data frame containing all information gathered about a team per season (df_all)

df_all = df_all.merge(df_playoffs, on=["Tm", "year"])
df_all

"""## Finalizing Edits
Make finalizing edits to the data frame:
"""

# see the types of the variables in the data frame

df_all.dtypes

# make sure all datatypes are appropriate

df_all.W = df_all.W.astype(int)
df_all.L = df_all.L.astype(int)
df_all["T"] = df_all["T"].astype(int)
df_all["W-L%"] = df_all.W.astype(int)
df_all.PF = df_all.PF.astype(int)
df_all.PA = df_all.PA.astype(int)
df_all.PD = df_all.PD.astype(float)
df_all.MoV = df_all.MoV.astype(float)
df_all.SoS = df_all.SoS.astype(float)
df_all.SRS = df_all.SRS.astype(float)
df_all.OSRS = df_all.OSRS.astype(float)
df_all.DSRS = df_all.DSRS.astype(float)

# see the types of the variables in the data frame

df_all.dtypes

# view the finalized data frame

df_all

"""# Save CSV"""

from google.colab import drive
drive.mount('drive')

df_all.to_csv('football.csv')
!cp football.csv "drive/My Drive"
